public class LCS {
    //Time complexity O(2^n*m)
    //Space Complexity: O(n)
    //Not Optimal beacuse of overLapping SubProblems
    public static int lcs(String s1,String s2,int m,int n){
        //Base case
        if(m==0 || n==0){
            return 0;
        }
        //Recursive Function call
        // Exact Math 
        if(s1.charAt(m-1)== s2.charAt(n-1)){
            return 1+lcs(s1,s2,m-1,n-1);
        }
        //if there is not exact match
        else{
            return Math.max(lcs(s1,s2,m-1,n),lcs(s1,s2,m,n-1));
        }
    }
    //Memoization Approach
    //Time complexity O(m*n)
    //Space Complexity O(m*n)
    public static int lcsMemo(String s1,String s2,int m,int n,int[][]dp){
          //Base case
          if(m==0 || n==0){
            return 0;
        }
        //Optimization - avoid Recomputataion of the same function calls
        if(dp[m][n]!=-1){
            return dp[m][n];
        }
        //Recursive Function call
        // Exact Math 
        if(s1.charAt(m-1)== s2.charAt(n-1)){
            return dp[m][n]=1+lcs(s1,s2,m-1,n-1);
        }
        //if there is not exact match
        else{
            return dp[m][n]=Math.max(lcs(s1,s2,m-1,n),lcs(s1,s2,m,n-1));
        }

    }
    // Tabulation Method
    public static int lcsTabu(String s1,String s2,int m,int n){
        int [][]dp= new int[m+1][n+1];
        for(int i=0;i<=m;i++){
            for(int j=0;j<=n;j++){
                if(i==0 || j==0){
                    dp[i][j]=0;
                }else if(s1.charAt(i-1)==s2.charAt(j-1)){
                    // to Refer the previous Character
                    dp[i][j]=1+dp[i-1][j-1];
                }else{
                    dp[i][j]=Math.max(dp[i-1][j],dp[i][j-1]);
                }
            }
        }
        return dp[m][n];
    }


    public static void main(String[] args) {
        String s1= "AGGTAB";
        String s2= "GXTXAYB";
        int m= s1.length();
        int n= s2.length();
        System.out.println("The Longest Common subsequence of the above string is :"+lcs(s1,s2,m,n));
       
        int [][]dp=new int[m+1][n+1];
       for(int i=0;i<=m;i++){
        for(int j=0;j<=n;j++){
            dp[i][j]=-1;
        }
       }
       System.out.println("The Longest Common subsequence of the above string is :"+lcsMemo(s1,s2,m,n,dp));
       System.out.println("The Longest Common subsequence of the above string is :"+lcsTabu(s1,s2,m,n));

        
    }
    
}
